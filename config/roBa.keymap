#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        back_to_layer0: back_to_layer0 {
            compatible = "zmk,behavior-macro";
            label = "BACK_TO_LAYER0";
            #binding-cells = <0>;
            bindings = <&trans &to 0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R        &kp T                                                         &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F        &kp G        &kp LBKT                  &kp RBKT               &kp H        &kp J  &kp K      &kp L    &kp SEMI
&mt_tp LEFT_SHIFT Z  &kp X         &kp C         &kp V        &kp B        &kp LEFT_PARENTHESIS      &kp RIGHT_PARENTHESIS  &kp N        &kp M  &kp COMMA  &kp DOT  &mt_tp RIGHT_SHIFT SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt 1 LANG2  &lt 2 SPACE  &lt 3 LANG1               &lt 2 BACKSPACE        &lt 6 ENTER                             &mt RCTRL ESCAPE
            >;
        };

        ARROWS {
            bindings = <
&kp N1     &kp N2  &kp N3  &kp N4  &kp N5                        &kp N6     &kp N7    &kp N8    &kp N9     &kp N0
&trans     &kp F2  &kp F3  &kp F4  &kp F5   &trans      &trans   &kp PG_UP  &kp HOME  &kp UP    &kp END    &kp MINUS
&kp LSHFT  &kp F7  &kp F8  &kp F9  &kp F10  &trans      &trans   &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp RSHFT
&kp LCTRL  &trans  &trans  &trans  &trans   &trans      &kp DEL  &trans                                    &kp RCTRL
            >;
        };

        SHORTCUT {
            bindings = <
&kp LC(Q)  &kp LC(W)         &kp LA(F4)         &kp LC(R)  &kp LC(T)                                                  &kp LC(W)          &kp LC(R)     &kp LC(T)     &kp LC(LS(T))  &kp LC(P)
&kp LC(A)  &kp LC(S)         &kp LC(D)          &kp LC(F)  &kp LS(LC(T))  &kp LA(LC(F5))        &trans                &kp LC(PAGE_UP)    &kp LC(HOME)  &kp LA(UP)    &kp LC(END)    &kp LG(LC(LEFT))
&kp LC(Z)  &kp LC(X)         &kp LC(C)          &kp LC(V)  &kp LC(B)      &kp LS(LG(LEFT))      &kp LS(LG(UP_ARROW))  &kp LC(PAGE_DOWN)  &kp LA(LEFT)  &kp LA(DOWN)  &kp LA(RIGHT)  &kp LG(LC(RIGHT))
&trans     &kp LC(LG(LEFT))  &kp LC(LG(RIGHT))  &trans     &trans         &trans                &kp DELETE            &trans                                                        &trans
            >;
        };

        SIGNATURE {
            bindings = <
&kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)   &kp LS(PRCNT)                             &kp LS(CARET)         &kp LS(AMPS)           &kp LS(STAR)  &kp LS(LPAR)   &kp LS(RPAR)
&trans        &trans      &trans         &kp GRAVE      &kp SQT        &trans      &trans         &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp BSLH      &kp LS(UNDER)  &kp MINUS
&trans        &trans      &trans         &kp LS(TILDE)  &kp LS(DQT)    &trans      &trans         &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)  &kp LS(PIPE)  &kp LS(PLUS)   &kp EQUAL
&mo 7         &trans      &trans         &trans         &trans         &trans      &kp BACKSPACE  &trans                                                                    &kp PRINTSCREEN
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans    &trans       &trans                                         &trans       &trans    &trans    &trans    &trans
&trans  &trans  &mkp MB2  &mkp MB1     &mo 5        &trans           &trans           &trans       &mkp MB1  &mkp MB3  &mkp MB2  &mo 5
&trans  &trans  &trans    &trans       &mkp MB3     &trans           &trans           &trans       &trans    &trans    &trans    &trans
&trans  &trans  &trans    &lt 1 LANG2  &lt 2 SPACE  &lt 3 LANG1      &lt 2 BACKSPACE  &lt 6 ENTER                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        TENKEY {
            bindings = <
&kp TAB              &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_ASTERISK                                           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans    &kp RIGHT_ALT  &kp TAB
&kp LS(KP_NUMBER_0)  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MINUS     &kp LS(KP_EQUAL)      &kp LG(LC(LEFT))   &kp PG_UP             &kp HOME               &kp UP    &kp END        &kp RS(SEMICOLON)
&kp LSHFT            &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_PLUS      &kp KP_DIVIDE         &kp LC(LG(RIGHT))  &kp PG_DN             &kp LEFT               &kp DOWN  &kp RIGHT      &mt RIGHT_SHIFT KP_SLASH
&kp LCTRL            &kp KP_DOT       &kp KP_NUMBER_0  &kp LALT         &kp LGUI         &trans                &kp DELETE         &trans                                                                &kp LG(L)
            >;
        };

        HW {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans           &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &bootloader      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans           &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
